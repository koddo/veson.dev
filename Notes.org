
* Notes

** Converting org to html

*** Option: Use emacs to convert org

I want to generate html from org, the body only, to insert contents into templates.
 
I was looking for a way to use command line args in elisp, which is not hard, but I somehow didn't think about stdin, and luckily I stumbled upon this snippet while searching for info on the ~org-html-export-as-html~ function:
https://gnu.support/gnu-emacs/emacs-lisp/Emacs-Lisp-emacs-org-to-html-el-on-command-line-convert-your-Org-files-on-command-line-to-HTML-output.html

This is going to be slow, but it's a tiny blog anyway.

$ cat test-page.org | ./build.el
...
<div class="outline-text-3" id="text-1-1">
<p>
text
</p>
</div>
...
</div>


The html is not indented as you might have noticed, and the :html-indent does nothing, but there's a command line utility called =tidy=, see https://www.html-tidy.org/.

$ cat test-page.org | ./build.el | tidy --indent auto

Its ouput contains warnings and it adds proper html5 body and headers, but that's configurable.



*** Option: Use an external exporter of org files




*** Option: Exporting parsed org as s-exps

It can be exported to xml to be processed later, I like the idea, but it would be actually easier to process s-exps in our case.
https://github.com/ndw/org-to-xml

https://emacs.stackexchange.com/questions/17622/how-can-i-walk-an-org-mode-tree

#+begin_src emacs-lisp
(print (org-element-parse-buffer))
#+end_src 




** Configuring html exported via emacs

*** Option: Custom ids and classes of exported org

By default there are random ids like id="text-org2d4245f".

But we can add =:CUSTOM_ID: my custom id= to the properties of a header manually.

Adding automatically the =CUSTOM_ID=:
https://writequit.org/articles/emacs-org-mode-generate-ids.html
Like =:CUSTOM_ID: h-7c38f8ef-0c8c-4f17-a7da-7ed7d5eedeff=

The HTML exporter assigns the following special CSS classes:
https://orgmode.org/manual/CSS-support.html

Add attributes like =#+ATTR_HTML: :class myclass :id myid= to source blocks:
https://emacs.stackexchange.com/questions/68592/add-css-class-or-id-tag-to-individual-src-blocks
https://www.reddit.com/r/emacs/comments/fdwm8m/is_it_possible_to_add_a_custom_header_to_orgmode/

Generate anchors from headlines:
https://emacs.stackexchange.com/questions/614/creating-permalinks-for-sections-in-html-exported-from-org-mode
https://github.com/alphapapa/unpackaged.el#export-to-html-with-useful-anchors

Less divs by redefining =org-html-section=:
https://www.reddit.com/r/orgmode/comments/fmk4eb/html_export_orghtmlsection_adds_a_div_i_do_not/

https://orgmode.org/manual/Publishing-options.html
for options like =:with-toc=, =:html-html5-fancy=, etc



*** Option: Derived exporter

We could make a derived exporter to control what and how is converted.
https://orgmode.org/manual/Advanced-Export-Configuration.html
https://orgmode.org/worg/dev/org-export-reference.html



*** Option: Another exporting backend

https://github.com/balddotcat/ox-slimhtml
This export backend is now part of org.
Not actively maintained though.

And this:
https://github.com/vascoferreira25/ox-tailwind
Haven't looked closely.
"the only thing that it does is allowing you to customize the classes of the HTML and exporting a more barebones HTML (It does not create as many divs and sections as the normal HTML export back-end)"




** HTML parts in org files

*** HTML5

Semantic elements:
https://html5doctor.com/element-index/
https://www.smashingmagazine.com/2022/07/article-section-elements-accessibility/

=#+begin_aside...= gets rendered to =<aside>...</aside>=.
When =aside= is in the =org-html-html5-elements=.

The =:html-container "section"= option for publishing turns top-level headings into sections.  
Or these properties can be added to headings manually: =:HTML_CONTAINER: article= and =:HTML_CONTAINER: section=.


** In-line code in org-mode using =, ~, backticks `, emphasis, and escaping characters

The most frustrating thing in =org-mode= is inability to use backticks for inline code `like this`.
You have to use emphasis ==like this==, and when there's an equal sign in the middle, e.g., =<div class​==​"foo">=, the emphasis breaks, unless the equal sign is escaped with two zero width spaces around it.

Options: https://stackoverflow.com/questions/16944298/org-mode-inline-code-with-equals-signs
https://emacs.stackexchange.com/questions/13820/inline-verbatim-and-code-with-quotes-in-org-mode
https://orgmode.org/manual/Emphasis-and-Monospace.html
https://orgmode.org/manual/Escape-Character.html
Insert it: =C-x 8 <RET> zero width space <RET>=, or use a function to wrap a character: https://stackoverflow.com/questions/15324852/how-do-i-escape-slash-in-org-mode/75398146#75398146

And there's an issue with =zero width space=, it should be stripped from export.
Org-mode by itself doesn't do this yet, there are attempts of fixing this: https://mail.gnu.org/archive/html/emacs-orgmode/2022-07/msg00785.html
For now there's a package that strips it: https://github.com/QiangF/org-extra-emphasis
More about this pakcage:
https://emacsnotes.wordpress.com/2022/09/09/intra-word-emphasis-in-org-mode-using-zero-width-spaces-east-asian-language-users-please-take-note/
https://emacsnotes.wordpress.com/2022/06/29/use-org-extra-emphasis-when-you-need-more-emphasis-markers-in-emacs-org-mode/

And luckily, =~= and === can be used interchangeably if you only plan to export to html, it mostly matters for latex.

Another way to include source code blocks: =src_R[:exports code]{X <- 3}=.
Can be just =src_text[:exports code]{hello world}=, or even just =src_text{hello world}=,
if you add this at the top of the file: =#+PROPERTY: header-args :exports code=

There's a mode that hides emphasis characters in emacs to reduce clutter: https://github.com/awth13/org-appear

