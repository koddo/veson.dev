
* Notes

** Converting org to html

*** Option: Use emacs to convert org                                  :emacs:

I want to generate html from org, the body only, to insert contents into templates.
 
I was looking for a way to use command line args in elisp, which is not hard, but I somehow didn't think about stdin, and luckily I stumbled upon this snippet while searching for info on the ~org-html-export-as-html~ function:
https://gnu.support/gnu-emacs/emacs-lisp/Emacs-Lisp-emacs-org-to-html-el-on-command-line-convert-your-Org-files-on-command-line-to-HTML-output.html

This is going to be slow, but it's a tiny blog anyway. See the note on options for converting multiple files.

The central part is =org-html-export-as-html=, it converts an org buffer to an html string.

+$ cat test-page.org | ./build.el+
$ cat test-page.org | ./convert-org-from-stdin.el
...
<div class="outline-text-3" id="text-1-1">
<p>
text
</p>
</div>
...
</div>


The html is not indented as you might have noticed, and the :html-indent does nothing, but there's a command line utility called =tidy=, see https://www.html-tidy.org/.

+$ cat test-page.org | ./build.el | tidy --indent auto+
$ cat test-page.org | ./convert-org-from-stdin.el | tidy --indent auto

Its ouput contains warnings and it adds proper html5 body and headers, but that's configurable.

**** Trade-off: I love emacs and org, and I don't care much about performance

It takes more than a second to convert one org file. The good news is we can have a pool of emacs instances to convert in parallel.

+-** TODO measure how slow it is to convert org to html via emacsclient :emacs:-+


**** Performance tuning of export

https://bastibe.de/2014-05-07-speeding-up-org-publishing.html

Try running profiler: (progn (profiler-start 'cpu) (org-publish "blog") (profiler-report))

And disabling vc:
(remove-hook 'find-file-hooks 'vc-find-file-hook)
(setq vc-handled-backends nil) 



*** Option: use a package called org-export, or org-page

https://github.com/nhoffman/org-export

It converts a single file though, it's just an alternative to =emacs --script=.
Converting multiple files would be as slow.

or

https://github.com/emacsorphanage/org-page


*** Option: Use an external exporter of org files

https://github.com/honmaple/org-python

https://github.com/eigenhombre/clj-org



*** Option: Exporting parsed org as s-exps                            :emacs:

It can be exported to xml to be processed later, I like the idea, but it would be actually easier to process s-exps in our case.
https://github.com/ndw/org-to-xml

https://emacs.stackexchange.com/questions/17622/how-can-i-walk-an-org-mode-tree

#+begin_src emacs-lisp
(print (org-element-parse-buffer))
#+end_src 



*** Option: publishing the entire website with org-publish

I don't employ this option because I'd like to use =enlive= as a template engine.

https://orgmode.org/manual/Publishing.html
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/
https://taingram.org/blog/org-mode-blog.html
https://emacs.love/weblorg/
https://pavpanchekha.com/blog/org-mode-publish.html



*** Option: pandoc: org->html or org->gfm->html

With pandoc we can use pretty much anything that understand markdown.
More than that, pandoc allows user-provided filters that give access to AST of documents.
With this we can do pretty much anything.



** Convert multiple files at once                                     :emacs:

Motivation: starting a separate emacs instance for each file to convert is slow.

E.g., running one hundred instances, each printing a short string, takes four seconds:

#+begin_src text
$ time for i in {1..100} ; do emacs --quick --batch --eval '(princ 1)' ; done
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
real	0m3.966s
user	0m2.637s
sys	0m1.313s
#+end_src


*** Option: insert an information separator between files when piping them altogether

https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
ASCII char num 28 -- INFORMATION SEPARATOR FOUR -- file separator -- End of file. Or between a concatenation of what might otherwise be separate files. 

Escape the delimiter in files before joining them and sending via pipe to emacs. 

from https://unix.stackexchange.com/questions/522637/passing-multiple-files-through-stdin-over-ssh#comment966701_522709:
#+begin_quote
Therefore, I'd suggest EOT="$(printf $'\x1c')" in advanced shells or else EOT="$(awk 'BEGIN{printf"%c",28}')" for compatibility. You'll need to quote it when you put it in place, such as echo "$EOT$EOT$EOT" (tripled to lower the odds of matching a binary file).
#+end_quote




*** Option: send a list of files to convert and store intermediate results



*** Option: start an emacs server and use emacsclient to convert files one by one

(setq server-socket-dir ".")
(setq server-name ".local-emacs-server-socket")   ; don't forget to .gitignore
(server-start)

Or set TMPDIR, see https://stackoverflow.com/questions/22071093/location-of-emacs-socket/23615026#23615026

But we are going to start it with =emacs --daemon=.
The TMPDIR env var doesn't seem to work when run as a daemon, unfortunately.

#+begin_example
$ ( export NAME=$(mktemp) ; emacs --quick --daemon="$NAME" --load=my-defuns.el ; echo "socket: $NAME" )
Starting Emacs daemon.
socket: /tmp/tmp.1e9zYPJqX7
#+end_example

Now we want to connect to this emacs daemon using =emacsclient= and ask it to convert org to html and print the result.


**** Caveat: emacsclient can't print anything, and how to deal with that

Ok, emacs is run as a daemon, there's another problem haha:
emacsclient can't print anything to stdout, it can only output the return values, and all the printing stays within the emacs daemon.

#+begin_example
$ emacsclient --socket-name='...' --eval '(progn (princ "hello") (princ "111\n222"))'
"111\n222"
#+end_example

People start another instance of emacs each time to eval this output string and print it.
https://emacs.stackexchange.com/questions/28665/print-unquoted-output-to-stdout-from-emacsclient
But this isn't helpful in our case, we want to avoid running a lot of emacs instances.

We could try and parse emacs strings ourselves to get rid of all those escaped chars.

But here's an easier solution: the =echo= command has the =-e= flag, "enable interpretation of backslash escapes".
https://emacs.stackexchange.com/questions/30689/pretty-print-s-expressions-from-the-command-line

#+begin_example
$ echo -e $( echo "111\n222" )
111
222
#+end_example

Almost there.

#+begin_example
$ echo -e -n $( emacsclient --socket-name='...' --eval '(princ "111\n222")' )
"111
222"
#+end_example

The last step is easy: get rid of the qoutes. Can be done with =sed= before invoking =echo -e=. Or with clojure later.

#+begin_example
$ echo -e -n $( emacsclient --socket-name='...' --eval '(princ "111\n222")'  | sed 's/^.//;s/.$//'  )
111
222
#+end_example

=| sed 's/^.//;s/.$//'= here is the same as running sed twice: =| sed 's/^.//' | sed 's/.$//'= 

=-n= means do not output the trailing newline btw.




**** Caveat: emacsclient can't read from stdin

I've tried to start an emacs server and use =read-from-minibuffer= for reading from stdin by emacsclient, but this doesn't work.
Apparently this function only reads from stdin when we run =emacs --script=.

It seems the only solution to this is making =mktemp= files and send their paths back and forth between emacs server and emacsclient.


+** TODO rewrite the function that reads from stdin              :emacs:maybe:+
++
+It now does the following:+
++
+#+begin_src elisp+
+(while (setq this-read (ignore-errors (read-from-minibuffer "")))+
+(setq org-document-content (concat org-document-content "\n" this-read)))+
+#+end_src+
++
+I want it to collect all chunks and then join them.+


*** Option: creating intermediate =mktemp= files and send their paths between emacs server and emacsclient 

from https://stackoverflow.com/questions/48109547/how-to-use-emacsclient-e-command-to-convert-a-org-file-to-html/48121525#48121525:

emacsclient -e "(progn (find-file \"file.org\") (org-html-export-to-html) (kill-buffer))" 

=org-html-export-to-html= has an async option, but it requires using =org-export-stack=, and I haven't looked into this.
If we ever need to scale, it would probably be easier to have multiple emacs servers in parallel.

Make sure you have a clean-up strategy. Copying a file to a =.my-intermediate-results/= directory and giving it a random name before converting would be safer that converting files in the =blog/= dir, this lowers the chances of removing articles by accident.



** Configuring html exported via emacs

*** Option: Custom ids and classes of exported org

By default there are random ids like id="text-org2d4245f".

But we can add =:CUSTOM_ID: my custom id= to the properties of a header manually.

Adding automatically the =CUSTOM_ID=:
https://writequit.org/articles/emacs-org-mode-generate-ids.html
Like =:CUSTOM_ID: h-7c38f8ef-0c8c-4f17-a7da-7ed7d5eedeff=

The HTML exporter assigns the following special CSS classes:
https://orgmode.org/manual/CSS-support.html

Add attributes like =#+ATTR_HTML: :class myclass :id myid= to source blocks:
https://emacs.stackexchange.com/questions/68592/add-css-class-or-id-tag-to-individual-src-blocks
https://www.reddit.com/r/emacs/comments/fdwm8m/is_it_possible_to_add_a_custom_header_to_orgmode/

Generate anchors from headlines:
https://emacs.stackexchange.com/questions/614/creating-permalinks-for-sections-in-html-exported-from-org-mode
https://github.com/alphapapa/unpackaged.el#export-to-html-with-useful-anchors

Less divs by redefining =org-html-section=:
https://www.reddit.com/r/orgmode/comments/fmk4eb/html_export_orghtmlsection_adds_a_div_i_do_not/

https://orgmode.org/manual/Publishing-options.html
for options like =:with-toc=, =:html-html5-fancy=, etc



*** Option: Derived exporter

We could make a derived exporter to control what and how is converted.
https://orgmode.org/manual/Advanced-Export-Configuration.html
https://orgmode.org/worg/dev/org-export-reference.html



*** Option: Another exporting backend

https://github.com/balddotcat/ox-slimhtml
This export backend is now part of org.
Not actively maintained though.

And this:
https://github.com/vascoferreira25/ox-tailwind
Haven't looked closely.
"the only thing that it does is allowing you to customize the classes of the HTML and exporting a more barebones HTML (It does not create as many divs and sections as the normal HTML export back-end)"




** HTML parts in org files

*** HTML5

Semantic elements:
https://html5doctor.com/element-index/
https://www.smashingmagazine.com/2022/07/article-section-elements-accessibility/

=#+begin_aside...= gets rendered to =<aside>...</aside>=.
When =aside= is in the =org-html-html5-elements=.

The =:html-container "section"= option for publishing turns top-level headings into sections.  
Or these properties can be added to headings manually: =:HTML_CONTAINER: article= and =:HTML_CONTAINER: section=.


*** Inserting pre-rendered html in org files

#+begin_src
#+include: "test-html-include.html" export html

#+html: <p>literal html code for export</p>

#+begin_export html
<p>also gets included</p>
#+end_export

Just one tag: @@html:<br />@@
@@html:<b>insert bold text as a whole</b>@@
@@html:<b>@@bold text between two separately inserted tags@@html:</b>@@
#+end_src

See https://orgmode.org/manual/Quoting-HTML-tags.html


** In-line code in org-mode using =, ~, backticks `, emphasis, and escaping characters

The most frustrating thing in =org-mode= is inability to use backticks for inline code `like this`.
You have to use emphasis ==like this==, and when there's an equal sign in the middle, e.g., =<div class​==​"foo">=, the emphasis breaks, unless the equal sign is escaped with two zero width spaces around it.

Options: https://stackoverflow.com/questions/16944298/org-mode-inline-code-with-equals-signs
https://emacs.stackexchange.com/questions/13820/inline-verbatim-and-code-with-quotes-in-org-mode
https://orgmode.org/manual/Emphasis-and-Monospace.html
https://orgmode.org/manual/Escape-Character.html
Insert it: =C-x 8 <RET> zero width space <RET>=, or use a function to wrap a character: https://stackoverflow.com/questions/15324852/how-do-i-escape-slash-in-org-mode/75398146#75398146

And there's an issue with =zero width space=, it should be stripped from export.
Org-mode by itself doesn't do this yet, there are attempts of fixing this: https://mail.gnu.org/archive/html/emacs-orgmode/2022-07/msg00785.html
For now there's a package that strips it: https://github.com/QiangF/org-extra-emphasis
More about this pakcage:
https://emacsnotes.wordpress.com/2022/09/09/intra-word-emphasis-in-org-mode-using-zero-width-spaces-east-asian-language-users-please-take-note/
https://emacsnotes.wordpress.com/2022/06/29/use-org-extra-emphasis-when-you-need-more-emphasis-markers-in-emacs-org-mode/

And luckily, =~= and === can be used interchangeably if you only plan to export to html, it mostly matters for latex.

Another way to include source code blocks: =src_R[:exports code]{X <- 3}=.
Can be just =src_text[:exports code]{hello world}=, or even just =src_text{hello world}=,
if you add this at the top of the file: =#+PROPERTY: header-args :exports code=

There's a mode that hides emphasis characters in emacs to reduce clutter: https://github.com/awth13/org-appear



** Static site generators

*** Option: stasis+enlive

Stasis gives you total freedom in how to structure your project.
There are only a couple of functions, like =slurp-directory= for getting all relevant pages to process and =export-pages= for writing the final result.
Everything else you configure yourself in code, and this is clojure, you have all gamut of functions to work with data. 
https://github.com/magnars/stasis

I decided to use enlive as a template engine.
In its basic form it can just inject articles into elements of templates.
This makes it possible to work on templates completely separately of everything else.
Templates are just html pages, nothing more, there's no code, only target elements.
https://github.com/cgrand/enlive

*** Other options in clojure and/or emacs

stasis+hiccup
https://cjohansen.no/building-static-sites-in-clojure-with-stasis/
https://nickgeorge.net/programming/custom-static-clojure-websites-an-update/







** Managing versions of emacs, clojure, etc

*** Option: use system-wise emacs and clojure

This would be ok, but having two versions of everything installed for different purposes is not fun to manage.

I use emacs every day, I update packages quite often. I don't think I'm going to update versions for the blog as often.



*** Option: use nix

I only need headless emacs for scripting, so this is the best option to me.


*** Option: compile from source


** Front matter

Definition from printing: everything in a book that comes before the story begins is its front matter

Jekyll and other static site generators let you set variables for a page in a block called front matter:

#+begin_example
---
title: Once upon a time
layout: post
---
#+end_example

I decided to use an src block instead of =---=, because I want to have an edn structure:

#+begin_example
#+name: front-matter
#+begin_src clojure
{
 :title "Once upon a time"
 :layout "post"
 }
#+end_src
#+end_example

This lets us have arbitrary data in the front matter, which can be used later in templates.
In jekyll you'd have to have separate data files: https://jekyllrb.com/docs/datafiles/

Triple minus is easier to type, but this is emacs, it can create front matter for us in a hook, for example.

The data can be cut from the front matter block with a regex and converted to map by edn reader, this is safe:
from https://github.com/clojure/tools.reader#example-usage
"To read data structures, functions from clojure.tools.reader.edn should be used, since those are safe and don't allow any code execution at all."



** DDD

get a structure of files to publish
for each file
    convert it to html -- get its contents
    use the template
    write to the publish/ dir


** How to run it

*** Generate html from org separately

+=$ cat test-page.org | ./build.el | tidy --indent auto --show-body-only yes --quiet yes=+
=$ cat test-page.org | ./convert-org-from-stdin.el | tidy --indent auto --show-body-only yes --quiet yes=

*** Repl

#+begin_src example
$ nix-shell
[nix-shell]$ clj -A:cider-clj
...
nREPL server started on port 42069 on host localhost - nrepl://localhost:42069
#+end_src

Then =M-x cider-connect=.

*** Convert org using emacs server and emacsclient

#+begin_src example
( export NAME=$(mktemp) ; emacs --quick --daemon="$NAME" --load=emacs-server.init.el ; echo "$NAME" )
emacsclient --socket-name='...' --eval '(my-convert-org-to-html "blog/test-entry.org")'
emacsclient --socket-name='...' --eval '(kill-emacs)'
#+end_src


** Conventional commits

https://www.conventionalcommits.org/ -- it's a good practice.

What I use here:

- =feat=
- =add= -- something smaller than a feature, like a function
- =fix=
- =refactor=
- =revert=
- =style= -- for formatting code with no changes
- =test=
- =docs= -- with these tags in scope: readme, adr, comments
- =note= -- add-only log notes
- =chore= -- misc, e.g., modifying =.gitignore=
- =trash= -- I commit a lot of things in =(comment)= blocks


  
I use =add=, because there are other granular types like =fix= and =refactor=. Can be part of a feature.
To me =feat= is for finishing an actual feature.



** Regural expressions

Trying out https://github.com/lambdaisland/regal
It's fantastic. Here's a snippet from the code, it's much more readable than actual regex compiled from it or written manually: 

#+begin_src clojure
(regal/regex [:cat          ; ws is whitespaces, defined outside
              :start 
              wn     "#+name:" ws "front-matter"     ws :line-break
              wn     "#+begin_src" ws "clojure"      ws :line-break
              [:capture front-matter-edn]               :line-break
              ws     "#+end_src"                     ws :line-break
              [:capture body]])
;; => 
#+end_src

It's for capturing front-matter-edn and body from files:

#+begin_src example
;; #+name: front-matter   
;; #+begin_src clojure 
;; {whatever}
;; #+end_src
;; * hello world
;; =>
;; [ "{whatever}", "* hello world" ]
#+end_src

Forget about escaping in strings, it does this for you.


** Template engine: enlive

Options are: enlive, hickory, jsoup.
Actually enlive and hickory are built upon jsoup, which is ok to use without any wrappers if you want to parse html.

But for templating I choose enlive, it has quite a lot of useful abstcations for this.
Albeit it's slow, probably because of persistent datastructures, but that's ok for a blog.

https://github.com/cgrand/enlive
https://github.com/clj-commons/hickory
https://jsoup.org/


** html-tidy

Apparently, the =html-tidy= tool can be used a library called =libtidy=, I'll deal with this later, and for now I do the following:  

#+begin_src
cd output
find . -name '*.html' -type f -print -exec tidy -indent -modify -quiet '{}' \;
#+end_src


https://www.html-tidy.org/documentation/
https://api.html-tidy.org/#part_apiref


*** Option: JTidy

JTidy is a port of html-tidy, and it's fine, but I'd like to stick to a more popular tool for html5.



*** How to configure org-publish to export good html

How to adjust HTML elements using org-publish in Emacs
https://emacs.stackexchange.com/questions/76599/how-to-adjust-html-elements-using-org-publish-in-emacs

quote:

<div id="preamble" class="status">...</div>
<div id="content" class="content">...</div>
<div id="postamble" class="status">...</div>

however I want to change the divs to a more semantic markup such as this:

<header id="preamble">...</header>
<main id="content">...</main>
<footer id="postamble">...</footer>



also, there's a possibility of configure it heavily:
https://notes.alex-miller.co/publish/




see https://github.com/fniessen/org-html-themes


